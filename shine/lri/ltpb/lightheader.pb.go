// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0--rc1
// source: lightheader.proto

package ltpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FlashData_Mode int32

const (
	FlashData_NOFLASH FlashData_Mode = 0
	FlashData_FLASH   FlashData_Mode = 1
	FlashData_TORCH   FlashData_Mode = 2
)

// Enum value maps for FlashData_Mode.
var (
	FlashData_Mode_name = map[int32]string{
		0: "NOFLASH",
		1: "FLASH",
		2: "TORCH",
	}
	FlashData_Mode_value = map[string]int32{
		"NOFLASH": 0,
		"FLASH":   1,
		"TORCH":   2,
	}
)

func (x FlashData_Mode) Enum() *FlashData_Mode {
	p := new(FlashData_Mode)
	*p = x
	return p
}

func (x FlashData_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlashData_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_lightheader_proto_enumTypes[0].Descriptor()
}

func (FlashData_Mode) Type() protoreflect.EnumType {
	return &file_lightheader_proto_enumTypes[0]
}

func (x FlashData_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FlashData_Mode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FlashData_Mode(num)
	return nil
}

// Deprecated: Use FlashData_Mode.Descriptor instead.
func (FlashData_Mode) EnumDescriptor() ([]byte, []int) {
	return file_lightheader_proto_rawDescGZIP(), []int{4, 0}
}

type FactoryDeviceCalibration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flash     *FlashCalibration `protobuf:"bytes,1,opt,name=flash" json:"flash,omitempty"`
	Tof       *ToFCalibration   `protobuf:"bytes,2,opt,name=tof" json:"tof,omitempty"`
	TimeStamp *TimeStamp        `protobuf:"bytes,3,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
}

func (x *FactoryDeviceCalibration) Reset() {
	*x = FactoryDeviceCalibration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightheader_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactoryDeviceCalibration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactoryDeviceCalibration) ProtoMessage() {}

func (x *FactoryDeviceCalibration) ProtoReflect() protoreflect.Message {
	mi := &file_lightheader_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactoryDeviceCalibration.ProtoReflect.Descriptor instead.
func (*FactoryDeviceCalibration) Descriptor() ([]byte, []int) {
	return file_lightheader_proto_rawDescGZIP(), []int{0}
}

func (x *FactoryDeviceCalibration) GetFlash() *FlashCalibration {
	if x != nil {
		return x.Flash
	}
	return nil
}

func (x *FactoryDeviceCalibration) GetTof() *ToFCalibration {
	if x != nil {
		return x.Tof
	}
	return nil
}

func (x *FactoryDeviceCalibration) GetTimeStamp() *TimeStamp {
	if x != nil {
		return x.TimeStamp
	}
	return nil
}

type FactoryModuleCalibration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraId     *CameraID                   `protobuf:"varint,1,req,name=camera_id,json=cameraId,enum=ltpb.CameraID" json:"camera_id,omitempty"`
	Color        []*ColorCalibration         `protobuf:"bytes,2,rep,name=color" json:"color,omitempty"`
	Geometry     *GeometricCalibration       `protobuf:"bytes,3,opt,name=geometry" json:"geometry,omitempty"`
	Vignetting   *VignettingCharacterization `protobuf:"bytes,4,opt,name=vignetting" json:"vignetting,omitempty"`
	HotPixelMap  *HotPixelMap                `protobuf:"bytes,5,opt,name=hot_pixel_map,json=hotPixelMap" json:"hot_pixel_map,omitempty"`
	DeadPixelMap *DeadPixelMap               `protobuf:"bytes,6,opt,name=dead_pixel_map,json=deadPixelMap" json:"dead_pixel_map,omitempty"`
	TimeStamp    *TimeStamp                  `protobuf:"bytes,7,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
}

func (x *FactoryModuleCalibration) Reset() {
	*x = FactoryModuleCalibration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightheader_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactoryModuleCalibration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactoryModuleCalibration) ProtoMessage() {}

func (x *FactoryModuleCalibration) ProtoReflect() protoreflect.Message {
	mi := &file_lightheader_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactoryModuleCalibration.ProtoReflect.Descriptor instead.
func (*FactoryModuleCalibration) Descriptor() ([]byte, []int) {
	return file_lightheader_proto_rawDescGZIP(), []int{1}
}

func (x *FactoryModuleCalibration) GetCameraId() CameraID {
	if x != nil && x.CameraId != nil {
		return *x.CameraId
	}
	return CameraID_A1
}

func (x *FactoryModuleCalibration) GetColor() []*ColorCalibration {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *FactoryModuleCalibration) GetGeometry() *GeometricCalibration {
	if x != nil {
		return x.Geometry
	}
	return nil
}

func (x *FactoryModuleCalibration) GetVignetting() *VignettingCharacterization {
	if x != nil {
		return x.Vignetting
	}
	return nil
}

func (x *FactoryModuleCalibration) GetHotPixelMap() *HotPixelMap {
	if x != nil {
		return x.HotPixelMap
	}
	return nil
}

func (x *FactoryModuleCalibration) GetDeadPixelMap() *DeadPixelMap {
	if x != nil {
		return x.DeadPixelMap
	}
	return nil
}

func (x *FactoryModuleCalibration) GetTimeStamp() *TimeStamp {
	if x != nil {
		return x.TimeStamp
	}
	return nil
}

type ColorCalibrationGold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraId  *CameraID           `protobuf:"varint,1,req,name=camera_id,json=cameraId,enum=ltpb.CameraID" json:"camera_id,omitempty"`
	Data      []*ColorCalibration `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
	TimeStamp *TimeStamp          `protobuf:"bytes,3,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
}

func (x *ColorCalibrationGold) Reset() {
	*x = ColorCalibrationGold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightheader_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorCalibrationGold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorCalibrationGold) ProtoMessage() {}

func (x *ColorCalibrationGold) ProtoReflect() protoreflect.Message {
	mi := &file_lightheader_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorCalibrationGold.ProtoReflect.Descriptor instead.
func (*ColorCalibrationGold) Descriptor() ([]byte, []int) {
	return file_lightheader_proto_rawDescGZIP(), []int{2}
}

func (x *ColorCalibrationGold) GetCameraId() CameraID {
	if x != nil && x.CameraId != nil {
		return *x.CameraId
	}
	return CameraID_A1
}

func (x *ColorCalibrationGold) GetData() []*ColorCalibration {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ColorCalibrationGold) GetTimeStamp() *TimeStamp {
	if x != nil {
		return x.TimeStamp
	}
	return nil
}

type SensorData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      *SensorType             `protobuf:"varint,1,req,name=type,enum=ltpb.SensorType" json:"type,omitempty"`
	Data      *SensorCharacterization `protobuf:"bytes,2,req,name=data" json:"data,omitempty"`
	TimeStamp *TimeStamp              `protobuf:"bytes,3,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
}

func (x *SensorData) Reset() {
	*x = SensorData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightheader_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorData) ProtoMessage() {}

func (x *SensorData) ProtoReflect() protoreflect.Message {
	mi := &file_lightheader_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorData.ProtoReflect.Descriptor instead.
func (*SensorData) Descriptor() ([]byte, []int) {
	return file_lightheader_proto_rawDescGZIP(), []int{3}
}

func (x *SensorData) GetType() SensorType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return SensorType_SENSOR_UNKNOWN
}

func (x *SensorData) GetData() *SensorCharacterization {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SensorData) GetTimeStamp() *TimeStamp {
	if x != nil {
		return x.TimeStamp
	}
	return nil
}

type FlashData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode           *FlashData_Mode `protobuf:"varint,1,req,name=mode,enum=ltpb.FlashData_Mode" json:"mode,omitempty"`
	LedcoolCurrent *uint32         `protobuf:"varint,2,opt,name=ledcool_current,json=ledcoolCurrent" json:"ledcool_current,omitempty"`
	LedwarmCurrent *uint32         `protobuf:"varint,3,opt,name=ledwarm_current,json=ledwarmCurrent" json:"ledwarm_current,omitempty"`
	FlashDuration  *uint32         `protobuf:"varint,4,opt,name=flash_duration,json=flashDuration" json:"flash_duration,omitempty"`
	OffsetDuration *int32          `protobuf:"varint,5,opt,name=offset_duration,json=offsetDuration" json:"offset_duration,omitempty"`
}

func (x *FlashData) Reset() {
	*x = FlashData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightheader_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlashData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlashData) ProtoMessage() {}

func (x *FlashData) ProtoReflect() protoreflect.Message {
	mi := &file_lightheader_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlashData.ProtoReflect.Descriptor instead.
func (*FlashData) Descriptor() ([]byte, []int) {
	return file_lightheader_proto_rawDescGZIP(), []int{4}
}

func (x *FlashData) GetMode() FlashData_Mode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return FlashData_NOFLASH
}

func (x *FlashData) GetLedcoolCurrent() uint32 {
	if x != nil && x.LedcoolCurrent != nil {
		return *x.LedcoolCurrent
	}
	return 0
}

func (x *FlashData) GetLedwarmCurrent() uint32 {
	if x != nil && x.LedwarmCurrent != nil {
		return *x.LedwarmCurrent
	}
	return 0
}

func (x *FlashData) GetFlashDuration() uint32 {
	if x != nil && x.FlashDuration != nil {
		return *x.FlashDuration
	}
	return 0
}

func (x *FlashData) GetOffsetDuration() int32 {
	if x != nil && x.OffsetDuration != nil {
		return *x.OffsetDuration
	}
	return 0
}

type AFDebugInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FocusAchieved    *bool  `protobuf:"varint,1,opt,name=focus_achieved,json=focusAchieved" json:"focus_achieved,omitempty"`
	ImageFocalLength *int32 `protobuf:"varint,2,opt,name=image_focal_length,json=imageFocalLength" json:"image_focal_length,omitempty"`
}

func (x *AFDebugInfo) Reset() {
	*x = AFDebugInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightheader_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AFDebugInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AFDebugInfo) ProtoMessage() {}

func (x *AFDebugInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lightheader_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AFDebugInfo.ProtoReflect.Descriptor instead.
func (*AFDebugInfo) Descriptor() ([]byte, []int) {
	return file_lightheader_proto_rawDescGZIP(), []int{5}
}

func (x *AFDebugInfo) GetFocusAchieved() bool {
	if x != nil && x.FocusAchieved != nil {
		return *x.FocusAchieved
	}
	return false
}

func (x *AFDebugInfo) GetImageFocalLength() int32 {
	if x != nil && x.ImageFocalLength != nil {
		return *x.ImageFocalLength
	}
	return 0
}

type Compatibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version  *uint32  `protobuf:"varint,1,req,name=version" json:"version,omitempty"`
	Features []string `protobuf:"bytes,2,rep,name=features" json:"features,omitempty"`
}

func (x *Compatibility) Reset() {
	*x = Compatibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightheader_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Compatibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Compatibility) ProtoMessage() {}

func (x *Compatibility) ProtoReflect() protoreflect.Message {
	mi := &file_lightheader_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Compatibility.ProtoReflect.Descriptor instead.
func (*Compatibility) Descriptor() ([]byte, []int) {
	return file_lightheader_proto_rawDescGZIP(), []int{6}
}

func (x *Compatibility) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *Compatibility) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

type LightHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageUniqueIdLow     *uint64                     `protobuf:"varint,1,opt,name=image_unique_id_low,json=imageUniqueIdLow" json:"image_unique_id_low,omitempty"`
	ImageUniqueIdHigh    *uint64                     `protobuf:"varint,2,opt,name=image_unique_id_high,json=imageUniqueIdHigh" json:"image_unique_id_high,omitempty"`
	ImageTimeStamp       *TimeStamp                  `protobuf:"bytes,3,opt,name=image_time_stamp,json=imageTimeStamp" json:"image_time_stamp,omitempty"`
	ImageFocalLength     *int32                      `protobuf:"varint,4,opt,name=image_focal_length,json=imageFocalLength" json:"image_focal_length,omitempty"`
	ImageReferenceCamera *CameraID                   `protobuf:"varint,5,opt,name=image_reference_camera,json=imageReferenceCamera,enum=ltpb.CameraID" json:"image_reference_camera,omitempty"`
	DeviceUniqueIdLow    *uint64                     `protobuf:"varint,6,opt,name=device_unique_id_low,json=deviceUniqueIdLow" json:"device_unique_id_low,omitempty"`
	DeviceUniqueIdHigh   *uint64                     `protobuf:"varint,7,opt,name=device_unique_id_high,json=deviceUniqueIdHigh" json:"device_unique_id_high,omitempty"`
	DeviceModelName      *string                     `protobuf:"bytes,8,opt,name=device_model_name,json=deviceModelName" json:"device_model_name,omitempty"`
	DeviceFwVersion      *string                     `protobuf:"bytes,9,opt,name=device_fw_version,json=deviceFwVersion" json:"device_fw_version,omitempty"`
	DeviceAsicFwVersion  *string                     `protobuf:"bytes,10,opt,name=device_asic_fw_version,json=deviceAsicFwVersion" json:"device_asic_fw_version,omitempty"`
	DeviceTemperature    *DeviceTemp                 `protobuf:"bytes,11,opt,name=device_temperature,json=deviceTemperature" json:"device_temperature,omitempty"`
	Modules              []*CameraModule             `protobuf:"bytes,12,rep,name=modules" json:"modules,omitempty"`
	ModuleCalibration    []*FactoryModuleCalibration `protobuf:"bytes,13,rep,name=module_calibration,json=moduleCalibration" json:"module_calibration,omitempty"`
	DeviceCalibration    *FactoryDeviceCalibration   `protobuf:"bytes,14,opt,name=device_calibration,json=deviceCalibration" json:"device_calibration,omitempty"`
	GoldCc               []*ColorCalibrationGold     `protobuf:"bytes,15,rep,name=gold_cc,json=goldCc" json:"gold_cc,omitempty"`
	SensorData           []*SensorData               `protobuf:"bytes,16,rep,name=sensor_data,json=sensorData" json:"sensor_data,omitempty"`
	TofRange             *float32                    `protobuf:"fixed32,17,opt,name=tof_range,json=tofRange" json:"tof_range,omitempty"`
	HwInfo               *HwInfo                     `protobuf:"bytes,18,opt,name=hw_info,json=hwInfo" json:"hw_info,omitempty"`
	ViewPreferences      *ViewPreferences            `protobuf:"bytes,19,opt,name=view_preferences,json=viewPreferences" json:"view_preferences,omitempty"`
	ProximitySensors     *ProximitySensors           `protobuf:"bytes,20,opt,name=proximity_sensors,json=proximitySensors" json:"proximity_sensors,omitempty"`
	FlashData            *FlashData                  `protobuf:"bytes,22,opt,name=flash_data,json=flashData" json:"flash_data,omitempty"`
	ImuData              []*IMUData                  `protobuf:"bytes,23,rep,name=imu_data,json=imuData" json:"imu_data,omitempty"`
	AfInfo               *AFDebugInfo                `protobuf:"bytes,24,opt,name=af_info,json=afInfo" json:"af_info,omitempty"`
	GpsData              *GPSData                    `protobuf:"bytes,25,opt,name=gps_data,json=gpsData" json:"gps_data,omitempty"`
	Compatibility        *Compatibility              `protobuf:"bytes,26,opt,name=compatibility" json:"compatibility,omitempty"`
	FaceData             []*FaceData                 `protobuf:"bytes,27,rep,name=face_data,json=faceData" json:"face_data,omitempty"`
}

func (x *LightHeader) Reset() {
	*x = LightHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightheader_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LightHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightHeader) ProtoMessage() {}

func (x *LightHeader) ProtoReflect() protoreflect.Message {
	mi := &file_lightheader_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightHeader.ProtoReflect.Descriptor instead.
func (*LightHeader) Descriptor() ([]byte, []int) {
	return file_lightheader_proto_rawDescGZIP(), []int{7}
}

func (x *LightHeader) GetImageUniqueIdLow() uint64 {
	if x != nil && x.ImageUniqueIdLow != nil {
		return *x.ImageUniqueIdLow
	}
	return 0
}

func (x *LightHeader) GetImageUniqueIdHigh() uint64 {
	if x != nil && x.ImageUniqueIdHigh != nil {
		return *x.ImageUniqueIdHigh
	}
	return 0
}

func (x *LightHeader) GetImageTimeStamp() *TimeStamp {
	if x != nil {
		return x.ImageTimeStamp
	}
	return nil
}

func (x *LightHeader) GetImageFocalLength() int32 {
	if x != nil && x.ImageFocalLength != nil {
		return *x.ImageFocalLength
	}
	return 0
}

func (x *LightHeader) GetImageReferenceCamera() CameraID {
	if x != nil && x.ImageReferenceCamera != nil {
		return *x.ImageReferenceCamera
	}
	return CameraID_A1
}

func (x *LightHeader) GetDeviceUniqueIdLow() uint64 {
	if x != nil && x.DeviceUniqueIdLow != nil {
		return *x.DeviceUniqueIdLow
	}
	return 0
}

func (x *LightHeader) GetDeviceUniqueIdHigh() uint64 {
	if x != nil && x.DeviceUniqueIdHigh != nil {
		return *x.DeviceUniqueIdHigh
	}
	return 0
}

func (x *LightHeader) GetDeviceModelName() string {
	if x != nil && x.DeviceModelName != nil {
		return *x.DeviceModelName
	}
	return ""
}

func (x *LightHeader) GetDeviceFwVersion() string {
	if x != nil && x.DeviceFwVersion != nil {
		return *x.DeviceFwVersion
	}
	return ""
}

func (x *LightHeader) GetDeviceAsicFwVersion() string {
	if x != nil && x.DeviceAsicFwVersion != nil {
		return *x.DeviceAsicFwVersion
	}
	return ""
}

func (x *LightHeader) GetDeviceTemperature() *DeviceTemp {
	if x != nil {
		return x.DeviceTemperature
	}
	return nil
}

func (x *LightHeader) GetModules() []*CameraModule {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *LightHeader) GetModuleCalibration() []*FactoryModuleCalibration {
	if x != nil {
		return x.ModuleCalibration
	}
	return nil
}

func (x *LightHeader) GetDeviceCalibration() *FactoryDeviceCalibration {
	if x != nil {
		return x.DeviceCalibration
	}
	return nil
}

func (x *LightHeader) GetGoldCc() []*ColorCalibrationGold {
	if x != nil {
		return x.GoldCc
	}
	return nil
}

func (x *LightHeader) GetSensorData() []*SensorData {
	if x != nil {
		return x.SensorData
	}
	return nil
}

func (x *LightHeader) GetTofRange() float32 {
	if x != nil && x.TofRange != nil {
		return *x.TofRange
	}
	return 0
}

func (x *LightHeader) GetHwInfo() *HwInfo {
	if x != nil {
		return x.HwInfo
	}
	return nil
}

func (x *LightHeader) GetViewPreferences() *ViewPreferences {
	if x != nil {
		return x.ViewPreferences
	}
	return nil
}

func (x *LightHeader) GetProximitySensors() *ProximitySensors {
	if x != nil {
		return x.ProximitySensors
	}
	return nil
}

func (x *LightHeader) GetFlashData() *FlashData {
	if x != nil {
		return x.FlashData
	}
	return nil
}

func (x *LightHeader) GetImuData() []*IMUData {
	if x != nil {
		return x.ImuData
	}
	return nil
}

func (x *LightHeader) GetAfInfo() *AFDebugInfo {
	if x != nil {
		return x.AfInfo
	}
	return nil
}

func (x *LightHeader) GetGpsData() *GPSData {
	if x != nil {
		return x.GpsData
	}
	return nil
}

func (x *LightHeader) GetCompatibility() *Compatibility {
	if x != nil {
		return x.Compatibility
	}
	return nil
}

func (x *LightHeader) GetFaceData() []*FaceData {
	if x != nil {
		return x.FaceData
	}
	return nil
}

var File_lightheader_proto protoreflect.FileDescriptor

var file_lightheader_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6c, 0x74, 0x70, 0x62, 0x1a, 0x13, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x10, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x76, 0x69, 0x67, 0x6e, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x68, 0x6f, 0x74, 0x5f, 0x70,
	0x69, 0x78, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x5f, 0x6d, 0x61,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x74, 0x6f, 0x66, 0x5f, 0x63, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x68, 0x77, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x69, 0x6d, 0x75, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x67, 0x70, 0x73, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0, 0x01, 0x0a, 0x18,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x46,
	0x6c, 0x61, 0x73, 0x68, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x03, 0x74, 0x6f, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x54, 0x6f, 0x46, 0x43, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x6f, 0x66, 0x12, 0x2e,
	0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x90,
	0x03, 0x0a, 0x18, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x09, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x44, 0x52, 0x08,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x40,
	0x0a, 0x0a, 0x76, 0x69, 0x67, 0x6e, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x56, 0x69, 0x67, 0x6e, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x76, 0x69, 0x67, 0x6e, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x35, 0x0a, 0x0d, 0x68, 0x6f, 0x74, 0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x48,
	0x6f, 0x74, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x52, 0x0b, 0x68, 0x6f, 0x74, 0x50,
	0x69, 0x78, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x38, 0x0a, 0x0e, 0x64, 0x65, 0x61, 0x64, 0x5f,
	0x70, 0x69, 0x78, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x61, 0x64, 0x50, 0x69, 0x78, 0x65, 0x6c,
	0x4d, 0x61, 0x70, 0x52, 0x0c, 0x64, 0x65, 0x61, 0x64, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x4d, 0x61,
	0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x9f, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x6c, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x44, 0x52, 0x08, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0x94, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x82, 0x02, 0x0a, 0x09, 0x46,
	0x6c, 0x61, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x46, 0x6c,
	0x61, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x65, 0x64, 0x63, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x65, 0x64,
	0x63, 0x6f, 0x6f, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6c,
	0x65, 0x64, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x65, 0x64, 0x77, 0x61, 0x72, 0x6d, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x6c,
	0x61, 0x73, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x29, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x4e, 0x4f, 0x46, 0x4c, 0x41, 0x53, 0x48, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x41,
	0x53, 0x48, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f, 0x52, 0x43, 0x48, 0x10, 0x02, 0x22,
	0x62, 0x0a, 0x0b, 0x41, 0x46, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25,
	0x0a, 0x0e, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x41, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x22, 0x45, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xeb, 0x0a, 0x0a, 0x0b, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f,
	0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x4c, 0x6f, 0x77, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x68, 0x69, 0x67,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x48, 0x69, 0x67, 0x68, 0x12, 0x39, 0x0a, 0x10, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x44, 0x0a, 0x16, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x49, 0x44, 0x52, 0x14, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f,
	0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x4c, 0x6f, 0x77, 0x12, 0x31, 0x0a, 0x15, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x68,
	0x69, 0x67, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x48, 0x69, 0x67, 0x68, 0x12, 0x2a, 0x0a,
	0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x66, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x77, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x73, 0x69, 0x63, 0x5f, 0x66, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x73, 0x69,
	0x63, 0x46, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x12, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x52, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c,
	0x74, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x07, 0x67, 0x6f, 0x6c, 0x64, 0x5f,
	0x63, 0x63, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x6f, 0x6c, 0x64, 0x52, 0x06, 0x67, 0x6f, 0x6c, 0x64, 0x43, 0x63, 0x12, 0x31, 0x0a, 0x0b,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x66, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x74, 0x6f, 0x66, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x07,
	0x68, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x6c, 0x74, 0x70, 0x62, 0x2e, 0x48, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x68, 0x77, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x10, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6c, 0x74, 0x70, 0x62, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74,
	0x79, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d,
	0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x66, 0x6c,
	0x61, 0x73, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x09, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x08, 0x69, 0x6d,
	0x75, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c,
	0x74, 0x70, 0x62, 0x2e, 0x49, 0x4d, 0x55, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x69, 0x6d, 0x75,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x07, 0x61, 0x66, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x41, 0x46, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x61, 0x66, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x28, 0x0a, 0x08, 0x67, 0x70, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x47, 0x50, 0x53, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x07, 0x67, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0d, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x09, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e,
	0x46, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x66, 0x61, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x4a, 0x04, 0x08, 0x15, 0x10, 0x16, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x6c, 0x74,
	0x70, 0x62, 0x3b, 0x6c, 0x74, 0x70, 0x62,
}

var (
	file_lightheader_proto_rawDescOnce sync.Once
	file_lightheader_proto_rawDescData = file_lightheader_proto_rawDesc
)

func file_lightheader_proto_rawDescGZIP() []byte {
	file_lightheader_proto_rawDescOnce.Do(func() {
		file_lightheader_proto_rawDescData = protoimpl.X.CompressGZIP(file_lightheader_proto_rawDescData)
	})
	return file_lightheader_proto_rawDescData
}

var file_lightheader_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_lightheader_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_lightheader_proto_goTypes = []any{
	(FlashData_Mode)(0),                // 0: ltpb.FlashData.Mode
	(*FactoryDeviceCalibration)(nil),   // 1: ltpb.FactoryDeviceCalibration
	(*FactoryModuleCalibration)(nil),   // 2: ltpb.FactoryModuleCalibration
	(*ColorCalibrationGold)(nil),       // 3: ltpb.ColorCalibrationGold
	(*SensorData)(nil),                 // 4: ltpb.SensorData
	(*FlashData)(nil),                  // 5: ltpb.FlashData
	(*AFDebugInfo)(nil),                // 6: ltpb.AFDebugInfo
	(*Compatibility)(nil),              // 7: ltpb.Compatibility
	(*LightHeader)(nil),                // 8: ltpb.LightHeader
	(*FlashCalibration)(nil),           // 9: ltpb.FlashCalibration
	(*ToFCalibration)(nil),             // 10: ltpb.ToFCalibration
	(*TimeStamp)(nil),                  // 11: ltpb.TimeStamp
	(CameraID)(0),                      // 12: ltpb.CameraID
	(*ColorCalibration)(nil),           // 13: ltpb.ColorCalibration
	(*GeometricCalibration)(nil),       // 14: ltpb.GeometricCalibration
	(*VignettingCharacterization)(nil), // 15: ltpb.VignettingCharacterization
	(*HotPixelMap)(nil),                // 16: ltpb.HotPixelMap
	(*DeadPixelMap)(nil),               // 17: ltpb.DeadPixelMap
	(SensorType)(0),                    // 18: ltpb.SensorType
	(*SensorCharacterization)(nil),     // 19: ltpb.SensorCharacterization
	(*DeviceTemp)(nil),                 // 20: ltpb.DeviceTemp
	(*CameraModule)(nil),               // 21: ltpb.CameraModule
	(*HwInfo)(nil),                     // 22: ltpb.HwInfo
	(*ViewPreferences)(nil),            // 23: ltpb.ViewPreferences
	(*ProximitySensors)(nil),           // 24: ltpb.ProximitySensors
	(*IMUData)(nil),                    // 25: ltpb.IMUData
	(*GPSData)(nil),                    // 26: ltpb.GPSData
	(*FaceData)(nil),                   // 27: ltpb.FaceData
}
var file_lightheader_proto_depIdxs = []int32{
	9,  // 0: ltpb.FactoryDeviceCalibration.flash:type_name -> ltpb.FlashCalibration
	10, // 1: ltpb.FactoryDeviceCalibration.tof:type_name -> ltpb.ToFCalibration
	11, // 2: ltpb.FactoryDeviceCalibration.time_stamp:type_name -> ltpb.TimeStamp
	12, // 3: ltpb.FactoryModuleCalibration.camera_id:type_name -> ltpb.CameraID
	13, // 4: ltpb.FactoryModuleCalibration.color:type_name -> ltpb.ColorCalibration
	14, // 5: ltpb.FactoryModuleCalibration.geometry:type_name -> ltpb.GeometricCalibration
	15, // 6: ltpb.FactoryModuleCalibration.vignetting:type_name -> ltpb.VignettingCharacterization
	16, // 7: ltpb.FactoryModuleCalibration.hot_pixel_map:type_name -> ltpb.HotPixelMap
	17, // 8: ltpb.FactoryModuleCalibration.dead_pixel_map:type_name -> ltpb.DeadPixelMap
	11, // 9: ltpb.FactoryModuleCalibration.time_stamp:type_name -> ltpb.TimeStamp
	12, // 10: ltpb.ColorCalibrationGold.camera_id:type_name -> ltpb.CameraID
	13, // 11: ltpb.ColorCalibrationGold.data:type_name -> ltpb.ColorCalibration
	11, // 12: ltpb.ColorCalibrationGold.time_stamp:type_name -> ltpb.TimeStamp
	18, // 13: ltpb.SensorData.type:type_name -> ltpb.SensorType
	19, // 14: ltpb.SensorData.data:type_name -> ltpb.SensorCharacterization
	11, // 15: ltpb.SensorData.time_stamp:type_name -> ltpb.TimeStamp
	0,  // 16: ltpb.FlashData.mode:type_name -> ltpb.FlashData.Mode
	11, // 17: ltpb.LightHeader.image_time_stamp:type_name -> ltpb.TimeStamp
	12, // 18: ltpb.LightHeader.image_reference_camera:type_name -> ltpb.CameraID
	20, // 19: ltpb.LightHeader.device_temperature:type_name -> ltpb.DeviceTemp
	21, // 20: ltpb.LightHeader.modules:type_name -> ltpb.CameraModule
	2,  // 21: ltpb.LightHeader.module_calibration:type_name -> ltpb.FactoryModuleCalibration
	1,  // 22: ltpb.LightHeader.device_calibration:type_name -> ltpb.FactoryDeviceCalibration
	3,  // 23: ltpb.LightHeader.gold_cc:type_name -> ltpb.ColorCalibrationGold
	4,  // 24: ltpb.LightHeader.sensor_data:type_name -> ltpb.SensorData
	22, // 25: ltpb.LightHeader.hw_info:type_name -> ltpb.HwInfo
	23, // 26: ltpb.LightHeader.view_preferences:type_name -> ltpb.ViewPreferences
	24, // 27: ltpb.LightHeader.proximity_sensors:type_name -> ltpb.ProximitySensors
	5,  // 28: ltpb.LightHeader.flash_data:type_name -> ltpb.FlashData
	25, // 29: ltpb.LightHeader.imu_data:type_name -> ltpb.IMUData
	6,  // 30: ltpb.LightHeader.af_info:type_name -> ltpb.AFDebugInfo
	26, // 31: ltpb.LightHeader.gps_data:type_name -> ltpb.GPSData
	7,  // 32: ltpb.LightHeader.compatibility:type_name -> ltpb.Compatibility
	27, // 33: ltpb.LightHeader.face_data:type_name -> ltpb.FaceData
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_lightheader_proto_init() }
func file_lightheader_proto_init() {
	if File_lightheader_proto != nil {
		return
	}
	file_camera_module_proto_init()
	file_camera_id_proto_init()
	file_time_stamp_proto_init()
	file_geometric_calibration_proto_init()
	file_color_calibration_proto_init()
	file_sensor_characterization_proto_init()
	file_vignetting_characterization_proto_init()
	file_hot_pixel_map_proto_init()
	file_device_temp_proto_init()
	file_dead_pixel_map_proto_init()
	file_tof_calibration_proto_init()
	file_flash_calibration_proto_init()
	file_sensor_type_proto_init()
	file_hw_info_proto_init()
	file_view_preferences_proto_init()
	file_proximity_sensors_proto_init()
	file_imu_data_proto_init()
	file_gps_data_proto_init()
	file_face_data_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_lightheader_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*FactoryDeviceCalibration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightheader_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*FactoryModuleCalibration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightheader_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ColorCalibrationGold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightheader_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SensorData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightheader_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*FlashData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightheader_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*AFDebugInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightheader_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Compatibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightheader_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*LightHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lightheader_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lightheader_proto_goTypes,
		DependencyIndexes: file_lightheader_proto_depIdxs,
		EnumInfos:         file_lightheader_proto_enumTypes,
		MessageInfos:      file_lightheader_proto_msgTypes,
	}.Build()
	File_lightheader_proto = out.File
	file_lightheader_proto_rawDesc = nil
	file_lightheader_proto_goTypes = nil
	file_lightheader_proto_depIdxs = nil
}
