// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0--rc1
// source: view_preferences.proto

package ltpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ViewPreferences_HDRMode int32

const (
	ViewPreferences_HDR_MODE_NONE    ViewPreferences_HDRMode = 0
	ViewPreferences_HDR_MODE_DEFAULT ViewPreferences_HDRMode = 1
	ViewPreferences_HDR_MODE_NATURAL ViewPreferences_HDRMode = 2
	ViewPreferences_HDR_MODE_SURREAL ViewPreferences_HDRMode = 3
)

// Enum value maps for ViewPreferences_HDRMode.
var (
	ViewPreferences_HDRMode_name = map[int32]string{
		0: "HDR_MODE_NONE",
		1: "HDR_MODE_DEFAULT",
		2: "HDR_MODE_NATURAL",
		3: "HDR_MODE_SURREAL",
	}
	ViewPreferences_HDRMode_value = map[string]int32{
		"HDR_MODE_NONE":    0,
		"HDR_MODE_DEFAULT": 1,
		"HDR_MODE_NATURAL": 2,
		"HDR_MODE_SURREAL": 3,
	}
)

func (x ViewPreferences_HDRMode) Enum() *ViewPreferences_HDRMode {
	p := new(ViewPreferences_HDRMode)
	*p = x
	return p
}

func (x ViewPreferences_HDRMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ViewPreferences_HDRMode) Descriptor() protoreflect.EnumDescriptor {
	return file_view_preferences_proto_enumTypes[0].Descriptor()
}

func (ViewPreferences_HDRMode) Type() protoreflect.EnumType {
	return &file_view_preferences_proto_enumTypes[0]
}

func (x ViewPreferences_HDRMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ViewPreferences_HDRMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ViewPreferences_HDRMode(num)
	return nil
}

// Deprecated: Use ViewPreferences_HDRMode.Descriptor instead.
func (ViewPreferences_HDRMode) EnumDescriptor() ([]byte, []int) {
	return file_view_preferences_proto_rawDescGZIP(), []int{0, 0}
}

type ViewPreferences_ViewPresets int32

const (
	ViewPreferences_VIEW_PRESET_NONE      ViewPreferences_ViewPresets = 0
	ViewPreferences_VIEW_PRESET_NATURAL   ViewPreferences_ViewPresets = 1
	ViewPreferences_VIEW_PRESET_FAITHFUL  ViewPreferences_ViewPresets = 2
	ViewPreferences_VIEW_PRESET_LANDSCAPE ViewPreferences_ViewPresets = 3
	ViewPreferences_VIEW_PRESET_PORTRAIT  ViewPreferences_ViewPresets = 4
)

// Enum value maps for ViewPreferences_ViewPresets.
var (
	ViewPreferences_ViewPresets_name = map[int32]string{
		0: "VIEW_PRESET_NONE",
		1: "VIEW_PRESET_NATURAL",
		2: "VIEW_PRESET_FAITHFUL",
		3: "VIEW_PRESET_LANDSCAPE",
		4: "VIEW_PRESET_PORTRAIT",
	}
	ViewPreferences_ViewPresets_value = map[string]int32{
		"VIEW_PRESET_NONE":      0,
		"VIEW_PRESET_NATURAL":   1,
		"VIEW_PRESET_FAITHFUL":  2,
		"VIEW_PRESET_LANDSCAPE": 3,
		"VIEW_PRESET_PORTRAIT":  4,
	}
)

func (x ViewPreferences_ViewPresets) Enum() *ViewPreferences_ViewPresets {
	p := new(ViewPreferences_ViewPresets)
	*p = x
	return p
}

func (x ViewPreferences_ViewPresets) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ViewPreferences_ViewPresets) Descriptor() protoreflect.EnumDescriptor {
	return file_view_preferences_proto_enumTypes[1].Descriptor()
}

func (ViewPreferences_ViewPresets) Type() protoreflect.EnumType {
	return &file_view_preferences_proto_enumTypes[1]
}

func (x ViewPreferences_ViewPresets) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ViewPreferences_ViewPresets) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ViewPreferences_ViewPresets(num)
	return nil
}

// Deprecated: Use ViewPreferences_ViewPresets.Descriptor instead.
func (ViewPreferences_ViewPresets) EnumDescriptor() ([]byte, []int) {
	return file_view_preferences_proto_rawDescGZIP(), []int{0, 1}
}

type ViewPreferences_SceneMode int32

const (
	ViewPreferences_SCENE_MODE_PORTRAIT  ViewPreferences_SceneMode = 0
	ViewPreferences_SCENE_MODE_LANDSCAPE ViewPreferences_SceneMode = 1
	ViewPreferences_SCENE_MODE_SPORT     ViewPreferences_SceneMode = 2
	ViewPreferences_SCENE_MODE_MACRO     ViewPreferences_SceneMode = 3
	ViewPreferences_SCENE_MODE_NIGHT     ViewPreferences_SceneMode = 4
	ViewPreferences_SCENE_MODE_NONE      ViewPreferences_SceneMode = 5
)

// Enum value maps for ViewPreferences_SceneMode.
var (
	ViewPreferences_SceneMode_name = map[int32]string{
		0: "SCENE_MODE_PORTRAIT",
		1: "SCENE_MODE_LANDSCAPE",
		2: "SCENE_MODE_SPORT",
		3: "SCENE_MODE_MACRO",
		4: "SCENE_MODE_NIGHT",
		5: "SCENE_MODE_NONE",
	}
	ViewPreferences_SceneMode_value = map[string]int32{
		"SCENE_MODE_PORTRAIT":  0,
		"SCENE_MODE_LANDSCAPE": 1,
		"SCENE_MODE_SPORT":     2,
		"SCENE_MODE_MACRO":     3,
		"SCENE_MODE_NIGHT":     4,
		"SCENE_MODE_NONE":      5,
	}
)

func (x ViewPreferences_SceneMode) Enum() *ViewPreferences_SceneMode {
	p := new(ViewPreferences_SceneMode)
	*p = x
	return p
}

func (x ViewPreferences_SceneMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ViewPreferences_SceneMode) Descriptor() protoreflect.EnumDescriptor {
	return file_view_preferences_proto_enumTypes[2].Descriptor()
}

func (ViewPreferences_SceneMode) Type() protoreflect.EnumType {
	return &file_view_preferences_proto_enumTypes[2]
}

func (x ViewPreferences_SceneMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ViewPreferences_SceneMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ViewPreferences_SceneMode(num)
	return nil
}

// Deprecated: Use ViewPreferences_SceneMode.Descriptor instead.
func (ViewPreferences_SceneMode) EnumDescriptor() ([]byte, []int) {
	return file_view_preferences_proto_rawDescGZIP(), []int{0, 2}
}

type ViewPreferences_AWBMode int32

const (
	ViewPreferences_AWB_MODE_AUTO        ViewPreferences_AWBMode = 0
	ViewPreferences_AWB_MODE_DAYLIGHT    ViewPreferences_AWBMode = 1
	ViewPreferences_AWB_MODE_SHADE       ViewPreferences_AWBMode = 2
	ViewPreferences_AWB_MODE_CLOUDY      ViewPreferences_AWBMode = 3
	ViewPreferences_AWB_MODE_TUNGSTEN    ViewPreferences_AWBMode = 4
	ViewPreferences_AWB_MODE_FLUORESCENT ViewPreferences_AWBMode = 5
	ViewPreferences_AWB_MODE_FLASH       ViewPreferences_AWBMode = 6
	ViewPreferences_AWB_MODE_CUSTOM      ViewPreferences_AWBMode = 7
	ViewPreferences_AWB_MODE_KELVIN      ViewPreferences_AWBMode = 8
)

// Enum value maps for ViewPreferences_AWBMode.
var (
	ViewPreferences_AWBMode_name = map[int32]string{
		0: "AWB_MODE_AUTO",
		1: "AWB_MODE_DAYLIGHT",
		2: "AWB_MODE_SHADE",
		3: "AWB_MODE_CLOUDY",
		4: "AWB_MODE_TUNGSTEN",
		5: "AWB_MODE_FLUORESCENT",
		6: "AWB_MODE_FLASH",
		7: "AWB_MODE_CUSTOM",
		8: "AWB_MODE_KELVIN",
	}
	ViewPreferences_AWBMode_value = map[string]int32{
		"AWB_MODE_AUTO":        0,
		"AWB_MODE_DAYLIGHT":    1,
		"AWB_MODE_SHADE":       2,
		"AWB_MODE_CLOUDY":      3,
		"AWB_MODE_TUNGSTEN":    4,
		"AWB_MODE_FLUORESCENT": 5,
		"AWB_MODE_FLASH":       6,
		"AWB_MODE_CUSTOM":      7,
		"AWB_MODE_KELVIN":      8,
	}
)

func (x ViewPreferences_AWBMode) Enum() *ViewPreferences_AWBMode {
	p := new(ViewPreferences_AWBMode)
	*p = x
	return p
}

func (x ViewPreferences_AWBMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ViewPreferences_AWBMode) Descriptor() protoreflect.EnumDescriptor {
	return file_view_preferences_proto_enumTypes[3].Descriptor()
}

func (ViewPreferences_AWBMode) Type() protoreflect.EnumType {
	return &file_view_preferences_proto_enumTypes[3]
}

func (x ViewPreferences_AWBMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ViewPreferences_AWBMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ViewPreferences_AWBMode(num)
	return nil
}

// Deprecated: Use ViewPreferences_AWBMode.Descriptor instead.
func (ViewPreferences_AWBMode) EnumDescriptor() ([]byte, []int) {
	return file_view_preferences_proto_rawDescGZIP(), []int{0, 3}
}

type ViewPreferences_Orientation int32

const (
	ViewPreferences_ORIENTATION_NORMAL          ViewPreferences_Orientation = 0
	ViewPreferences_ORIENTATION_ROT90_CW        ViewPreferences_Orientation = 1
	ViewPreferences_ORIENTATION_ROT90_CCW       ViewPreferences_Orientation = 2
	ViewPreferences_ORIENTATION_ROT90_CW_VFLIP  ViewPreferences_Orientation = 3
	ViewPreferences_ORIENTATION_ROT90_CCW_VFLIP ViewPreferences_Orientation = 4
	ViewPreferences_ORIENTATION_VFLIP           ViewPreferences_Orientation = 5
	ViewPreferences_ORIENTATION_HFLIP           ViewPreferences_Orientation = 6
	ViewPreferences_ORIENTATION_ROT180          ViewPreferences_Orientation = 7
)

// Enum value maps for ViewPreferences_Orientation.
var (
	ViewPreferences_Orientation_name = map[int32]string{
		0: "ORIENTATION_NORMAL",
		1: "ORIENTATION_ROT90_CW",
		2: "ORIENTATION_ROT90_CCW",
		3: "ORIENTATION_ROT90_CW_VFLIP",
		4: "ORIENTATION_ROT90_CCW_VFLIP",
		5: "ORIENTATION_VFLIP",
		6: "ORIENTATION_HFLIP",
		7: "ORIENTATION_ROT180",
	}
	ViewPreferences_Orientation_value = map[string]int32{
		"ORIENTATION_NORMAL":          0,
		"ORIENTATION_ROT90_CW":        1,
		"ORIENTATION_ROT90_CCW":       2,
		"ORIENTATION_ROT90_CW_VFLIP":  3,
		"ORIENTATION_ROT90_CCW_VFLIP": 4,
		"ORIENTATION_VFLIP":           5,
		"ORIENTATION_HFLIP":           6,
		"ORIENTATION_ROT180":          7,
	}
)

func (x ViewPreferences_Orientation) Enum() *ViewPreferences_Orientation {
	p := new(ViewPreferences_Orientation)
	*p = x
	return p
}

func (x ViewPreferences_Orientation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ViewPreferences_Orientation) Descriptor() protoreflect.EnumDescriptor {
	return file_view_preferences_proto_enumTypes[4].Descriptor()
}

func (ViewPreferences_Orientation) Type() protoreflect.EnumType {
	return &file_view_preferences_proto_enumTypes[4]
}

func (x ViewPreferences_Orientation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ViewPreferences_Orientation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ViewPreferences_Orientation(num)
	return nil
}

// Deprecated: Use ViewPreferences_Orientation.Descriptor instead.
func (ViewPreferences_Orientation) EnumDescriptor() ([]byte, []int) {
	return file_view_preferences_proto_rawDescGZIP(), []int{0, 4}
}

type ViewPreferences_AspectRatio int32

const (
	ViewPreferences_ASPECT_RATIO_4_3  ViewPreferences_AspectRatio = 0
	ViewPreferences_ASPECT_RATIO_16_9 ViewPreferences_AspectRatio = 1
)

// Enum value maps for ViewPreferences_AspectRatio.
var (
	ViewPreferences_AspectRatio_name = map[int32]string{
		0: "ASPECT_RATIO_4_3",
		1: "ASPECT_RATIO_16_9",
	}
	ViewPreferences_AspectRatio_value = map[string]int32{
		"ASPECT_RATIO_4_3":  0,
		"ASPECT_RATIO_16_9": 1,
	}
)

func (x ViewPreferences_AspectRatio) Enum() *ViewPreferences_AspectRatio {
	p := new(ViewPreferences_AspectRatio)
	*p = x
	return p
}

func (x ViewPreferences_AspectRatio) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ViewPreferences_AspectRatio) Descriptor() protoreflect.EnumDescriptor {
	return file_view_preferences_proto_enumTypes[5].Descriptor()
}

func (ViewPreferences_AspectRatio) Type() protoreflect.EnumType {
	return &file_view_preferences_proto_enumTypes[5]
}

func (x ViewPreferences_AspectRatio) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ViewPreferences_AspectRatio) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ViewPreferences_AspectRatio(num)
	return nil
}

// Deprecated: Use ViewPreferences_AspectRatio.Descriptor instead.
func (ViewPreferences_AspectRatio) EnumDescriptor() ([]byte, []int) {
	return file_view_preferences_proto_rawDescGZIP(), []int{0, 5}
}

type ViewPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FNumber                  *float32                     `protobuf:"fixed32,1,opt,name=f_number,json=fNumber" json:"f_number,omitempty"`
	EvOffset                 *float32                     `protobuf:"fixed32,2,opt,name=ev_offset,json=evOffset" json:"ev_offset,omitempty"`
	DisableCropping          *bool                        `protobuf:"varint,3,opt,name=disable_cropping,json=disableCropping" json:"disable_cropping,omitempty"`
	HdrMode                  *ViewPreferences_HDRMode     `protobuf:"varint,4,opt,name=hdr_mode,json=hdrMode,enum=ltpb.ViewPreferences_HDRMode" json:"hdr_mode,omitempty"`
	ViewPreset               *ViewPreferences_ViewPresets `protobuf:"varint,5,opt,name=view_preset,json=viewPreset,enum=ltpb.ViewPreferences_ViewPresets" json:"view_preset,omitempty"`
	SceneMode                *ViewPreferences_SceneMode   `protobuf:"varint,6,opt,name=scene_mode,json=sceneMode,enum=ltpb.ViewPreferences_SceneMode" json:"scene_mode,omitempty"`
	AwbMode                  *ViewPreferences_AWBMode     `protobuf:"varint,7,opt,name=awb_mode,json=awbMode,enum=ltpb.ViewPreferences_AWBMode" json:"awb_mode,omitempty"`
	Orientation              *ViewPreferences_Orientation `protobuf:"varint,9,opt,name=orientation,enum=ltpb.ViewPreferences_Orientation" json:"orientation,omitempty"`
	ImageGain                *float32                     `protobuf:"fixed32,10,opt,name=image_gain,json=imageGain" json:"image_gain,omitempty"`
	ImageIntegrationTimeNs   *uint64                      `protobuf:"varint,11,opt,name=image_integration_time_ns,json=imageIntegrationTimeNs" json:"image_integration_time_ns,omitempty"`
	UserRating               *uint32                      `protobuf:"varint,12,opt,name=user_rating,json=userRating" json:"user_rating,omitempty"`
	AspectRatio              *ViewPreferences_AspectRatio `protobuf:"varint,13,opt,name=aspect_ratio,json=aspectRatio,enum=ltpb.ViewPreferences_AspectRatio" json:"aspect_ratio,omitempty"`
	Crop                     *ViewPreferences_Crop        `protobuf:"bytes,14,opt,name=crop" json:"crop,omitempty"`
	AwbGains                 *ViewPreferences_ChannelGain `protobuf:"bytes,15,opt,name=awb_gains,json=awbGains" json:"awb_gains,omitempty"`
	IsOnTripod               *bool                        `protobuf:"varint,16,opt,name=is_on_tripod,json=isOnTripod" json:"is_on_tripod,omitempty"`
	QcLuxIndex               *float32                     `protobuf:"fixed32,17,opt,name=qc_lux_index,json=qcLuxIndex" json:"qc_lux_index,omitempty"`
	DisplayGain              *float32                     `protobuf:"fixed32,18,opt,name=display_gain,json=displayGain" json:"display_gain,omitempty"`
	DisplayIntegrationTimeNs *uint64                      `protobuf:"varint,19,opt,name=display_integration_time_ns,json=displayIntegrationTimeNs" json:"display_integration_time_ns,omitempty"`
}

func (x *ViewPreferences) Reset() {
	*x = ViewPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_preferences_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewPreferences) ProtoMessage() {}

func (x *ViewPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_view_preferences_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewPreferences.ProtoReflect.Descriptor instead.
func (*ViewPreferences) Descriptor() ([]byte, []int) {
	return file_view_preferences_proto_rawDescGZIP(), []int{0}
}

func (x *ViewPreferences) GetFNumber() float32 {
	if x != nil && x.FNumber != nil {
		return *x.FNumber
	}
	return 0
}

func (x *ViewPreferences) GetEvOffset() float32 {
	if x != nil && x.EvOffset != nil {
		return *x.EvOffset
	}
	return 0
}

func (x *ViewPreferences) GetDisableCropping() bool {
	if x != nil && x.DisableCropping != nil {
		return *x.DisableCropping
	}
	return false
}

func (x *ViewPreferences) GetHdrMode() ViewPreferences_HDRMode {
	if x != nil && x.HdrMode != nil {
		return *x.HdrMode
	}
	return ViewPreferences_HDR_MODE_NONE
}

func (x *ViewPreferences) GetViewPreset() ViewPreferences_ViewPresets {
	if x != nil && x.ViewPreset != nil {
		return *x.ViewPreset
	}
	return ViewPreferences_VIEW_PRESET_NONE
}

func (x *ViewPreferences) GetSceneMode() ViewPreferences_SceneMode {
	if x != nil && x.SceneMode != nil {
		return *x.SceneMode
	}
	return ViewPreferences_SCENE_MODE_PORTRAIT
}

func (x *ViewPreferences) GetAwbMode() ViewPreferences_AWBMode {
	if x != nil && x.AwbMode != nil {
		return *x.AwbMode
	}
	return ViewPreferences_AWB_MODE_AUTO
}

func (x *ViewPreferences) GetOrientation() ViewPreferences_Orientation {
	if x != nil && x.Orientation != nil {
		return *x.Orientation
	}
	return ViewPreferences_ORIENTATION_NORMAL
}

func (x *ViewPreferences) GetImageGain() float32 {
	if x != nil && x.ImageGain != nil {
		return *x.ImageGain
	}
	return 0
}

func (x *ViewPreferences) GetImageIntegrationTimeNs() uint64 {
	if x != nil && x.ImageIntegrationTimeNs != nil {
		return *x.ImageIntegrationTimeNs
	}
	return 0
}

func (x *ViewPreferences) GetUserRating() uint32 {
	if x != nil && x.UserRating != nil {
		return *x.UserRating
	}
	return 0
}

func (x *ViewPreferences) GetAspectRatio() ViewPreferences_AspectRatio {
	if x != nil && x.AspectRatio != nil {
		return *x.AspectRatio
	}
	return ViewPreferences_ASPECT_RATIO_4_3
}

func (x *ViewPreferences) GetCrop() *ViewPreferences_Crop {
	if x != nil {
		return x.Crop
	}
	return nil
}

func (x *ViewPreferences) GetAwbGains() *ViewPreferences_ChannelGain {
	if x != nil {
		return x.AwbGains
	}
	return nil
}

func (x *ViewPreferences) GetIsOnTripod() bool {
	if x != nil && x.IsOnTripod != nil {
		return *x.IsOnTripod
	}
	return false
}

func (x *ViewPreferences) GetQcLuxIndex() float32 {
	if x != nil && x.QcLuxIndex != nil {
		return *x.QcLuxIndex
	}
	return 0
}

func (x *ViewPreferences) GetDisplayGain() float32 {
	if x != nil && x.DisplayGain != nil {
		return *x.DisplayGain
	}
	return 0
}

func (x *ViewPreferences) GetDisplayIntegrationTimeNs() uint64 {
	if x != nil && x.DisplayIntegrationTimeNs != nil {
		return *x.DisplayIntegrationTimeNs
	}
	return 0
}

type ViewPreferences_Crop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *Point2F `protobuf:"bytes,1,req,name=start" json:"start,omitempty"`
	Size  *Point2F `protobuf:"bytes,2,req,name=size" json:"size,omitempty"`
}

func (x *ViewPreferences_Crop) Reset() {
	*x = ViewPreferences_Crop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_preferences_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewPreferences_Crop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewPreferences_Crop) ProtoMessage() {}

func (x *ViewPreferences_Crop) ProtoReflect() protoreflect.Message {
	mi := &file_view_preferences_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewPreferences_Crop.ProtoReflect.Descriptor instead.
func (*ViewPreferences_Crop) Descriptor() ([]byte, []int) {
	return file_view_preferences_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ViewPreferences_Crop) GetStart() *Point2F {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ViewPreferences_Crop) GetSize() *Point2F {
	if x != nil {
		return x.Size
	}
	return nil
}

type ViewPreferences_ChannelGain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R  *float32 `protobuf:"fixed32,1,req,name=r" json:"r,omitempty"`
	GR *float32 `protobuf:"fixed32,2,req,name=g_r,json=gR" json:"g_r,omitempty"`
	GB *float32 `protobuf:"fixed32,3,req,name=g_b,json=gB" json:"g_b,omitempty"`
	B  *float32 `protobuf:"fixed32,4,req,name=b" json:"b,omitempty"`
}

func (x *ViewPreferences_ChannelGain) Reset() {
	*x = ViewPreferences_ChannelGain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_preferences_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewPreferences_ChannelGain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewPreferences_ChannelGain) ProtoMessage() {}

func (x *ViewPreferences_ChannelGain) ProtoReflect() protoreflect.Message {
	mi := &file_view_preferences_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewPreferences_ChannelGain.ProtoReflect.Descriptor instead.
func (*ViewPreferences_ChannelGain) Descriptor() ([]byte, []int) {
	return file_view_preferences_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ViewPreferences_ChannelGain) GetR() float32 {
	if x != nil && x.R != nil {
		return *x.R
	}
	return 0
}

func (x *ViewPreferences_ChannelGain) GetGR() float32 {
	if x != nil && x.GR != nil {
		return *x.GR
	}
	return 0
}

func (x *ViewPreferences_ChannelGain) GetGB() float32 {
	if x != nil && x.GB != nil {
		return *x.GB
	}
	return 0
}

func (x *ViewPreferences_ChannelGain) GetB() float32 {
	if x != nil && x.B != nil {
		return *x.B
	}
	return 0
}

var File_view_preferences_proto protoreflect.FileDescriptor

var file_view_preferences_proto_rawDesc = []byte{
	0x0a, 0x16, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6c, 0x74, 0x70, 0x62, 0x1a, 0x0d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x32, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x0f,
	0x0a, 0x0f, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x07, 0x66, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x76, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x65, 0x76, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x6f, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x08, 0x68, 0x64, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x56, 0x69,
	0x65, 0x77, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x48, 0x44,
	0x52, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x68, 0x64, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x42,
	0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x56, 0x69,
	0x65, 0x77, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x61, 0x77, 0x62, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x56, 0x69, 0x65, 0x77,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x57, 0x42, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x61, 0x77, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x0b,
	0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x61, 0x69, 0x6e,
	0x12, 0x39, 0x0a, 0x19, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x16, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x0c,
	0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x0b, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x72, 0x6f, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x6f, 0x70, 0x52, 0x04, 0x63, 0x72,
	0x6f, 0x70, 0x12, 0x3e, 0x0a, 0x09, 0x61, 0x77, 0x62, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x56, 0x69, 0x65,
	0x77, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x61, 0x69, 0x6e, 0x52, 0x08, 0x61, 0x77, 0x62, 0x47, 0x61, 0x69,
	0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x69, 0x70,
	0x6f, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x6e, 0x54, 0x72,
	0x69, 0x70, 0x6f, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x71, 0x63, 0x5f, 0x6c, 0x75, 0x78, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x71, 0x63, 0x4c, 0x75,
	0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x47, 0x61, 0x69, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x73, 0x1a, 0x4e, 0x0a, 0x04, 0x43, 0x72, 0x6f, 0x70,
	0x12, 0x23, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x32, 0x46, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x32, 0x46, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x1a, 0x4b, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x47, 0x61, 0x69, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x02, 0x52, 0x01, 0x72, 0x12, 0x0f, 0x0a, 0x03, 0x67, 0x5f, 0x72, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x02, 0x52, 0x02, 0x67, 0x52, 0x12, 0x0f, 0x0a, 0x03, 0x67, 0x5f, 0x62, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x02, 0x52, 0x02, 0x67, 0x42, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x02, 0x52, 0x01, 0x62, 0x22, 0x5e, 0x0a, 0x07, 0x48, 0x44, 0x52, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x11, 0x0a, 0x0d, 0x48, 0x44, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x44, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x44, 0x52,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x41, 0x4c, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x48, 0x44, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x52, 0x52,
	0x45, 0x41, 0x4c, 0x10, 0x03, 0x22, 0x8b, 0x01, 0x0a, 0x0b, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x50, 0x52,
	0x45, 0x53, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x56,
	0x49, 0x45, 0x57, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x4e, 0x41, 0x54, 0x55, 0x52,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x50, 0x52, 0x45,
	0x53, 0x45, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x54, 0x48, 0x46, 0x55, 0x4c, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x4c, 0x41,
	0x4e, 0x44, 0x53, 0x43, 0x41, 0x50, 0x45, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x49, 0x45,
	0x57, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x41, 0x49,
	0x54, 0x10, 0x04, 0x22, 0x95, 0x01, 0x0a, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x50, 0x4f, 0x52, 0x54, 0x52, 0x41, 0x49, 0x54, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x41, 0x4e, 0x44, 0x53, 0x43, 0x41,
	0x50, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x52, 0x4f, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e,
	0x49, 0x47, 0x48, 0x54, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x05, 0x22, 0xcb, 0x01, 0x0a, 0x07,
	0x41, 0x57, 0x42, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x57, 0x42, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x57,
	0x42, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x57, 0x42, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x48,
	0x41, 0x44, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x57, 0x42, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x59, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x57,
	0x42, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x55, 0x4e, 0x47, 0x53, 0x54, 0x45, 0x4e, 0x10,
	0x04, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x57, 0x42, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x4c,
	0x55, 0x4f, 0x52, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x41,
	0x57, 0x42, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x53, 0x48, 0x10, 0x06, 0x12,
	0x13, 0x0a, 0x0f, 0x41, 0x57, 0x42, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x57, 0x42, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x4b, 0x45, 0x4c, 0x56, 0x49, 0x4e, 0x10, 0x08, 0x22, 0xe1, 0x01, 0x0a, 0x0b, 0x4f, 0x72,
	0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x52, 0x49,
	0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x4f, 0x54, 0x39, 0x30, 0x5f, 0x43, 0x57, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4f,
	0x52, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x54, 0x39, 0x30,
	0x5f, 0x43, 0x43, 0x57, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x54, 0x39, 0x30, 0x5f, 0x43, 0x57, 0x5f, 0x56,
	0x46, 0x4c, 0x49, 0x50, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x54, 0x39, 0x30, 0x5f, 0x43, 0x43, 0x57, 0x5f,
	0x56, 0x46, 0x4c, 0x49, 0x50, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x52, 0x49, 0x45, 0x4e,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x46, 0x4c, 0x49, 0x50, 0x10, 0x05, 0x12, 0x15,
	0x0a, 0x11, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x46,
	0x4c, 0x49, 0x50, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x54, 0x31, 0x38, 0x30, 0x10, 0x07, 0x22, 0x3a, 0x0a,
	0x0b, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x14, 0x0a, 0x10,
	0x41, 0x53, 0x50, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x5f, 0x34, 0x5f, 0x33,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x53, 0x50, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x5f, 0x31, 0x36, 0x5f, 0x39, 0x10, 0x01, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x42,
	0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x6c, 0x74, 0x70, 0x62, 0x3b, 0x6c, 0x74, 0x70, 0x62,
}

var (
	file_view_preferences_proto_rawDescOnce sync.Once
	file_view_preferences_proto_rawDescData = file_view_preferences_proto_rawDesc
)

func file_view_preferences_proto_rawDescGZIP() []byte {
	file_view_preferences_proto_rawDescOnce.Do(func() {
		file_view_preferences_proto_rawDescData = protoimpl.X.CompressGZIP(file_view_preferences_proto_rawDescData)
	})
	return file_view_preferences_proto_rawDescData
}

var file_view_preferences_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_view_preferences_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_view_preferences_proto_goTypes = []any{
	(ViewPreferences_HDRMode)(0),        // 0: ltpb.ViewPreferences.HDRMode
	(ViewPreferences_ViewPresets)(0),    // 1: ltpb.ViewPreferences.ViewPresets
	(ViewPreferences_SceneMode)(0),      // 2: ltpb.ViewPreferences.SceneMode
	(ViewPreferences_AWBMode)(0),        // 3: ltpb.ViewPreferences.AWBMode
	(ViewPreferences_Orientation)(0),    // 4: ltpb.ViewPreferences.Orientation
	(ViewPreferences_AspectRatio)(0),    // 5: ltpb.ViewPreferences.AspectRatio
	(*ViewPreferences)(nil),             // 6: ltpb.ViewPreferences
	(*ViewPreferences_Crop)(nil),        // 7: ltpb.ViewPreferences.Crop
	(*ViewPreferences_ChannelGain)(nil), // 8: ltpb.ViewPreferences.ChannelGain
	(*Point2F)(nil),                     // 9: ltpb.Point2F
}
var file_view_preferences_proto_depIdxs = []int32{
	0,  // 0: ltpb.ViewPreferences.hdr_mode:type_name -> ltpb.ViewPreferences.HDRMode
	1,  // 1: ltpb.ViewPreferences.view_preset:type_name -> ltpb.ViewPreferences.ViewPresets
	2,  // 2: ltpb.ViewPreferences.scene_mode:type_name -> ltpb.ViewPreferences.SceneMode
	3,  // 3: ltpb.ViewPreferences.awb_mode:type_name -> ltpb.ViewPreferences.AWBMode
	4,  // 4: ltpb.ViewPreferences.orientation:type_name -> ltpb.ViewPreferences.Orientation
	5,  // 5: ltpb.ViewPreferences.aspect_ratio:type_name -> ltpb.ViewPreferences.AspectRatio
	7,  // 6: ltpb.ViewPreferences.crop:type_name -> ltpb.ViewPreferences.Crop
	8,  // 7: ltpb.ViewPreferences.awb_gains:type_name -> ltpb.ViewPreferences.ChannelGain
	9,  // 8: ltpb.ViewPreferences.Crop.start:type_name -> ltpb.Point2F
	9,  // 9: ltpb.ViewPreferences.Crop.size:type_name -> ltpb.Point2F
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_view_preferences_proto_init() }
func file_view_preferences_proto_init() {
	if File_view_preferences_proto != nil {
		return
	}
	file_point2f_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_view_preferences_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ViewPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_preferences_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ViewPreferences_Crop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_preferences_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ViewPreferences_ChannelGain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_view_preferences_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_view_preferences_proto_goTypes,
		DependencyIndexes: file_view_preferences_proto_depIdxs,
		EnumInfos:         file_view_preferences_proto_enumTypes,
		MessageInfos:      file_view_preferences_proto_msgTypes,
	}.Build()
	File_view_preferences_proto = out.File
	file_view_preferences_proto_rawDesc = nil
	file_view_preferences_proto_goTypes = nil
	file_view_preferences_proto_depIdxs = nil
}
