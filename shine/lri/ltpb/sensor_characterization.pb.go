// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0--rc1
// source: sensor_characterization.proto

package ltpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SensorCharacterization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlackLevel *float32                                `protobuf:"fixed32,1,req,name=black_level,json=blackLevel" json:"black_level,omitempty"`
	WhiteLevel *float32                                `protobuf:"fixed32,2,req,name=white_level,json=whiteLevel" json:"white_level,omitempty"`
	CliffSlope *float32                                `protobuf:"fixed32,3,opt,name=cliff_slope,json=cliffSlope" json:"cliff_slope,omitempty"`
	VstModel   []*SensorCharacterization_VstNoiseModel `protobuf:"bytes,4,rep,name=vst_model,json=vstModel" json:"vst_model,omitempty"`
}

func (x *SensorCharacterization) Reset() {
	*x = SensorCharacterization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensor_characterization_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorCharacterization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorCharacterization) ProtoMessage() {}

func (x *SensorCharacterization) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_characterization_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorCharacterization.ProtoReflect.Descriptor instead.
func (*SensorCharacterization) Descriptor() ([]byte, []int) {
	return file_sensor_characterization_proto_rawDescGZIP(), []int{0}
}

func (x *SensorCharacterization) GetBlackLevel() float32 {
	if x != nil && x.BlackLevel != nil {
		return *x.BlackLevel
	}
	return 0
}

func (x *SensorCharacterization) GetWhiteLevel() float32 {
	if x != nil && x.WhiteLevel != nil {
		return *x.WhiteLevel
	}
	return 0
}

func (x *SensorCharacterization) GetCliffSlope() float32 {
	if x != nil && x.CliffSlope != nil {
		return *x.CliffSlope
	}
	return 0
}

func (x *SensorCharacterization) GetVstModel() []*SensorCharacterization_VstNoiseModel {
	if x != nil {
		return x.VstModel
	}
	return nil
}

type SensorCharacterization_VstNoiseModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gain         *uint32                                        `protobuf:"varint,1,req,name=gain" json:"gain,omitempty"`
	Threshold    *float32                                       `protobuf:"fixed32,2,req,name=threshold" json:"threshold,omitempty"`
	Scale        *float32                                       `protobuf:"fixed32,3,req,name=scale" json:"scale,omitempty"`
	Red          *SensorCharacterization_VstNoiseModel_VstModel `protobuf:"bytes,4,req,name=red" json:"red,omitempty"`
	Green        *SensorCharacterization_VstNoiseModel_VstModel `protobuf:"bytes,5,req,name=green" json:"green,omitempty"`
	Blue         *SensorCharacterization_VstNoiseModel_VstModel `protobuf:"bytes,6,req,name=blue" json:"blue,omitempty"`
	Panchromatic *SensorCharacterization_VstNoiseModel_VstModel `protobuf:"bytes,7,opt,name=panchromatic" json:"panchromatic,omitempty"`
}

func (x *SensorCharacterization_VstNoiseModel) Reset() {
	*x = SensorCharacterization_VstNoiseModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensor_characterization_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorCharacterization_VstNoiseModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorCharacterization_VstNoiseModel) ProtoMessage() {}

func (x *SensorCharacterization_VstNoiseModel) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_characterization_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorCharacterization_VstNoiseModel.ProtoReflect.Descriptor instead.
func (*SensorCharacterization_VstNoiseModel) Descriptor() ([]byte, []int) {
	return file_sensor_characterization_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SensorCharacterization_VstNoiseModel) GetGain() uint32 {
	if x != nil && x.Gain != nil {
		return *x.Gain
	}
	return 0
}

func (x *SensorCharacterization_VstNoiseModel) GetThreshold() float32 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

func (x *SensorCharacterization_VstNoiseModel) GetScale() float32 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return 0
}

func (x *SensorCharacterization_VstNoiseModel) GetRed() *SensorCharacterization_VstNoiseModel_VstModel {
	if x != nil {
		return x.Red
	}
	return nil
}

func (x *SensorCharacterization_VstNoiseModel) GetGreen() *SensorCharacterization_VstNoiseModel_VstModel {
	if x != nil {
		return x.Green
	}
	return nil
}

func (x *SensorCharacterization_VstNoiseModel) GetBlue() *SensorCharacterization_VstNoiseModel_VstModel {
	if x != nil {
		return x.Blue
	}
	return nil
}

func (x *SensorCharacterization_VstNoiseModel) GetPanchromatic() *SensorCharacterization_VstNoiseModel_VstModel {
	if x != nil {
		return x.Panchromatic
	}
	return nil
}

type SensorCharacterization_VstNoiseModel_VstModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A *float32 `protobuf:"fixed32,1,req,name=a" json:"a,omitempty"`
	B *float32 `protobuf:"fixed32,2,req,name=b" json:"b,omitempty"`
}

func (x *SensorCharacterization_VstNoiseModel_VstModel) Reset() {
	*x = SensorCharacterization_VstNoiseModel_VstModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensor_characterization_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorCharacterization_VstNoiseModel_VstModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorCharacterization_VstNoiseModel_VstModel) ProtoMessage() {}

func (x *SensorCharacterization_VstNoiseModel_VstModel) ProtoReflect() protoreflect.Message {
	mi := &file_sensor_characterization_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorCharacterization_VstNoiseModel_VstModel.ProtoReflect.Descriptor instead.
func (*SensorCharacterization_VstNoiseModel_VstModel) Descriptor() ([]byte, []int) {
	return file_sensor_characterization_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *SensorCharacterization_VstNoiseModel_VstModel) GetA() float32 {
	if x != nil && x.A != nil {
		return *x.A
	}
	return 0
}

func (x *SensorCharacterization_VstNoiseModel_VstModel) GetB() float32 {
	if x != nil && x.B != nil {
		return *x.B
	}
	return 0
}

var File_sensor_characterization_proto protoreflect.FileDescriptor

var file_sensor_characterization_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x04, 0x6c, 0x74, 0x70, 0x62, 0x22, 0xfa, 0x04, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x02, 0x52, 0x0a, 0x77, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x66, 0x66, 0x5f, 0x73, 0x6c, 0x6f, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x66, 0x66, 0x53, 0x6c,
	0x6f, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x76, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x73, 0x74, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x08, 0x76, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0xb3, 0x03, 0x0a,
	0x0d, 0x56, 0x73, 0x74, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x61,
	0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x02, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x02, 0x52,
	0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x03, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x56, 0x73, 0x74, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x56, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x03, 0x72, 0x65, 0x64, 0x12, 0x49, 0x0a,
	0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6c,
	0x74, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x73, 0x74, 0x4e, 0x6f,
	0x69, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x56, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x47, 0x0a, 0x04, 0x62, 0x6c, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x73, 0x74, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x56, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x04, 0x62, 0x6c, 0x75,
	0x65, 0x12, 0x57, 0x0a, 0x0c, 0x70, 0x61, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x73, 0x74, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x56, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0c, 0x70, 0x61,
	0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x1a, 0x26, 0x0a, 0x08, 0x56, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x02, 0x52, 0x01, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x02, 0x20, 0x02, 0x28, 0x02, 0x52,
	0x01, 0x62, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x6c, 0x74, 0x70, 0x62, 0x3b, 0x6c, 0x74, 0x70,
	0x62,
}

var (
	file_sensor_characterization_proto_rawDescOnce sync.Once
	file_sensor_characterization_proto_rawDescData = file_sensor_characterization_proto_rawDesc
)

func file_sensor_characterization_proto_rawDescGZIP() []byte {
	file_sensor_characterization_proto_rawDescOnce.Do(func() {
		file_sensor_characterization_proto_rawDescData = protoimpl.X.CompressGZIP(file_sensor_characterization_proto_rawDescData)
	})
	return file_sensor_characterization_proto_rawDescData
}

var file_sensor_characterization_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_sensor_characterization_proto_goTypes = []any{
	(*SensorCharacterization)(nil),                        // 0: ltpb.SensorCharacterization
	(*SensorCharacterization_VstNoiseModel)(nil),          // 1: ltpb.SensorCharacterization.VstNoiseModel
	(*SensorCharacterization_VstNoiseModel_VstModel)(nil), // 2: ltpb.SensorCharacterization.VstNoiseModel.VstModel
}
var file_sensor_characterization_proto_depIdxs = []int32{
	1, // 0: ltpb.SensorCharacterization.vst_model:type_name -> ltpb.SensorCharacterization.VstNoiseModel
	2, // 1: ltpb.SensorCharacterization.VstNoiseModel.red:type_name -> ltpb.SensorCharacterization.VstNoiseModel.VstModel
	2, // 2: ltpb.SensorCharacterization.VstNoiseModel.green:type_name -> ltpb.SensorCharacterization.VstNoiseModel.VstModel
	2, // 3: ltpb.SensorCharacterization.VstNoiseModel.blue:type_name -> ltpb.SensorCharacterization.VstNoiseModel.VstModel
	2, // 4: ltpb.SensorCharacterization.VstNoiseModel.panchromatic:type_name -> ltpb.SensorCharacterization.VstNoiseModel.VstModel
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_sensor_characterization_proto_init() }
func file_sensor_characterization_proto_init() {
	if File_sensor_characterization_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sensor_characterization_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SensorCharacterization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensor_characterization_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*SensorCharacterization_VstNoiseModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensor_characterization_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SensorCharacterization_VstNoiseModel_VstModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sensor_characterization_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sensor_characterization_proto_goTypes,
		DependencyIndexes: file_sensor_characterization_proto_depIdxs,
		MessageInfos:      file_sensor_characterization_proto_msgTypes,
	}.Build()
	File_sensor_characterization_proto = out.File
	file_sensor_characterization_proto_rawDesc = nil
	file_sensor_characterization_proto_goTypes = nil
	file_sensor_characterization_proto_depIdxs = nil
}
