// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0--rc1
// source: color_calibration.proto

package ltpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ColorCalibration_IlluminantType int32

const (
	ColorCalibration_A       ColorCalibration_IlluminantType = 0
	ColorCalibration_D50     ColorCalibration_IlluminantType = 1
	ColorCalibration_D65     ColorCalibration_IlluminantType = 2
	ColorCalibration_D75     ColorCalibration_IlluminantType = 3
	ColorCalibration_F2      ColorCalibration_IlluminantType = 4
	ColorCalibration_F7      ColorCalibration_IlluminantType = 5
	ColorCalibration_F11     ColorCalibration_IlluminantType = 6
	ColorCalibration_TL84    ColorCalibration_IlluminantType = 7
	ColorCalibration_UNKNOWN ColorCalibration_IlluminantType = 99
)

// Enum value maps for ColorCalibration_IlluminantType.
var (
	ColorCalibration_IlluminantType_name = map[int32]string{
		0:  "A",
		1:  "D50",
		2:  "D65",
		3:  "D75",
		4:  "F2",
		5:  "F7",
		6:  "F11",
		7:  "TL84",
		99: "UNKNOWN",
	}
	ColorCalibration_IlluminantType_value = map[string]int32{
		"A":       0,
		"D50":     1,
		"D65":     2,
		"D75":     3,
		"F2":      4,
		"F7":      5,
		"F11":     6,
		"TL84":    7,
		"UNKNOWN": 99,
	}
)

func (x ColorCalibration_IlluminantType) Enum() *ColorCalibration_IlluminantType {
	p := new(ColorCalibration_IlluminantType)
	*p = x
	return p
}

func (x ColorCalibration_IlluminantType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColorCalibration_IlluminantType) Descriptor() protoreflect.EnumDescriptor {
	return file_color_calibration_proto_enumTypes[0].Descriptor()
}

func (ColorCalibration_IlluminantType) Type() protoreflect.EnumType {
	return &file_color_calibration_proto_enumTypes[0]
}

func (x ColorCalibration_IlluminantType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ColorCalibration_IlluminantType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ColorCalibration_IlluminantType(num)
	return nil
}

// Deprecated: Use ColorCalibration_IlluminantType.Descriptor instead.
func (ColorCalibration_IlluminantType) EnumDescriptor() ([]byte, []int) {
	return file_color_calibration_proto_rawDescGZIP(), []int{0, 0}
}

type ColorCalibration_SpectralData_ChannelFormat int32

const (
	ColorCalibration_SpectralData_MONO       ColorCalibration_SpectralData_ChannelFormat = 0
	ColorCalibration_SpectralData_RGB        ColorCalibration_SpectralData_ChannelFormat = 1
	ColorCalibration_SpectralData_BAYER_RGGB ColorCalibration_SpectralData_ChannelFormat = 2
)

// Enum value maps for ColorCalibration_SpectralData_ChannelFormat.
var (
	ColorCalibration_SpectralData_ChannelFormat_name = map[int32]string{
		0: "MONO",
		1: "RGB",
		2: "BAYER_RGGB",
	}
	ColorCalibration_SpectralData_ChannelFormat_value = map[string]int32{
		"MONO":       0,
		"RGB":        1,
		"BAYER_RGGB": 2,
	}
)

func (x ColorCalibration_SpectralData_ChannelFormat) Enum() *ColorCalibration_SpectralData_ChannelFormat {
	p := new(ColorCalibration_SpectralData_ChannelFormat)
	*p = x
	return p
}

func (x ColorCalibration_SpectralData_ChannelFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColorCalibration_SpectralData_ChannelFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_color_calibration_proto_enumTypes[1].Descriptor()
}

func (ColorCalibration_SpectralData_ChannelFormat) Type() protoreflect.EnumType {
	return &file_color_calibration_proto_enumTypes[1]
}

func (x ColorCalibration_SpectralData_ChannelFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ColorCalibration_SpectralData_ChannelFormat) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ColorCalibration_SpectralData_ChannelFormat(num)
	return nil
}

// Deprecated: Use ColorCalibration_SpectralData_ChannelFormat.Descriptor instead.
func (ColorCalibration_SpectralData_ChannelFormat) EnumDescriptor() ([]byte, []int) {
	return file_color_calibration_proto_rawDescGZIP(), []int{0, 0, 0}
}

type ColorCalibration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          *ColorCalibration_IlluminantType `protobuf:"varint,1,req,name=type,enum=ltpb.ColorCalibration_IlluminantType" json:"type,omitempty"`
	ForwardMatrix *Matrix3X3F                      `protobuf:"bytes,2,req,name=forward_matrix,json=forwardMatrix" json:"forward_matrix,omitempty"`
	ColorMatrix   *Matrix3X3F                      `protobuf:"bytes,3,req,name=color_matrix,json=colorMatrix" json:"color_matrix,omitempty"`
	RgRatio       *float32                         `protobuf:"fixed32,4,req,name=rg_ratio,json=rgRatio" json:"rg_ratio,omitempty"`
	BgRatio       *float32                         `protobuf:"fixed32,5,req,name=bg_ratio,json=bgRatio" json:"bg_ratio,omitempty"`
	MacbethData   []*Point3F                       `protobuf:"bytes,6,rep,name=macbeth_data,json=macbethData" json:"macbeth_data,omitempty"`
	IlluminantSpd []*Point2F                       `protobuf:"bytes,7,rep,name=illuminant_spd,json=illuminantSpd" json:"illuminant_spd,omitempty"`
	SpectralData  *ColorCalibration_SpectralData   `protobuf:"bytes,8,opt,name=spectral_data,json=spectralData" json:"spectral_data,omitempty"`
}

func (x *ColorCalibration) Reset() {
	*x = ColorCalibration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_color_calibration_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorCalibration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorCalibration) ProtoMessage() {}

func (x *ColorCalibration) ProtoReflect() protoreflect.Message {
	mi := &file_color_calibration_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorCalibration.ProtoReflect.Descriptor instead.
func (*ColorCalibration) Descriptor() ([]byte, []int) {
	return file_color_calibration_proto_rawDescGZIP(), []int{0}
}

func (x *ColorCalibration) GetType() ColorCalibration_IlluminantType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ColorCalibration_A
}

func (x *ColorCalibration) GetForwardMatrix() *Matrix3X3F {
	if x != nil {
		return x.ForwardMatrix
	}
	return nil
}

func (x *ColorCalibration) GetColorMatrix() *Matrix3X3F {
	if x != nil {
		return x.ColorMatrix
	}
	return nil
}

func (x *ColorCalibration) GetRgRatio() float32 {
	if x != nil && x.RgRatio != nil {
		return *x.RgRatio
	}
	return 0
}

func (x *ColorCalibration) GetBgRatio() float32 {
	if x != nil && x.BgRatio != nil {
		return *x.BgRatio
	}
	return 0
}

func (x *ColorCalibration) GetMacbethData() []*Point3F {
	if x != nil {
		return x.MacbethData
	}
	return nil
}

func (x *ColorCalibration) GetIlluminantSpd() []*Point2F {
	if x != nil {
		return x.IlluminantSpd
	}
	return nil
}

func (x *ColorCalibration) GetSpectralData() *ColorCalibration_SpectralData {
	if x != nil {
		return x.SpectralData
	}
	return nil
}

type ColorCalibration_SpectralData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format      *ColorCalibration_SpectralData_ChannelFormat `protobuf:"varint,1,req,name=format,enum=ltpb.ColorCalibration_SpectralData_ChannelFormat" json:"format,omitempty"`
	ChannelData []*ColorCalibration_SpectralSensitivity      `protobuf:"bytes,2,rep,name=channel_data,json=channelData" json:"channel_data,omitempty"`
}

func (x *ColorCalibration_SpectralData) Reset() {
	*x = ColorCalibration_SpectralData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_color_calibration_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorCalibration_SpectralData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorCalibration_SpectralData) ProtoMessage() {}

func (x *ColorCalibration_SpectralData) ProtoReflect() protoreflect.Message {
	mi := &file_color_calibration_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorCalibration_SpectralData.ProtoReflect.Descriptor instead.
func (*ColorCalibration_SpectralData) Descriptor() ([]byte, []int) {
	return file_color_calibration_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ColorCalibration_SpectralData) GetFormat() ColorCalibration_SpectralData_ChannelFormat {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return ColorCalibration_SpectralData_MONO
}

func (x *ColorCalibration_SpectralData) GetChannelData() []*ColorCalibration_SpectralSensitivity {
	if x != nil {
		return x.ChannelData
	}
	return nil
}

type ColorCalibration_SpectralSensitivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *uint32   `protobuf:"varint,1,req,name=start" json:"start,omitempty"`
	End   *uint32   `protobuf:"varint,2,req,name=end" json:"end,omitempty"`
	Data  []float32 `protobuf:"fixed32,3,rep,packed,name=data" json:"data,omitempty"`
}

func (x *ColorCalibration_SpectralSensitivity) Reset() {
	*x = ColorCalibration_SpectralSensitivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_color_calibration_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorCalibration_SpectralSensitivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorCalibration_SpectralSensitivity) ProtoMessage() {}

func (x *ColorCalibration_SpectralSensitivity) ProtoReflect() protoreflect.Message {
	mi := &file_color_calibration_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorCalibration_SpectralSensitivity.ProtoReflect.Descriptor instead.
func (*ColorCalibration_SpectralSensitivity) Descriptor() ([]byte, []int) {
	return file_color_calibration_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ColorCalibration_SpectralSensitivity) GetStart() uint32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *ColorCalibration_SpectralSensitivity) GetEnd() uint32 {
	if x != nil && x.End != nil {
		return *x.End
	}
	return 0
}

func (x *ColorCalibration_SpectralSensitivity) GetData() []float32 {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_color_calibration_proto protoreflect.FileDescriptor

var file_color_calibration_proto_rawDesc = []byte{
	0x0a, 0x17, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6c, 0x74, 0x70, 0x62, 0x1a,
	0x10, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x33, 0x78, 0x33, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x33, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x32, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xbd, 0x06, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x43,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6c, 0x6c, 0x75, 0x6d,
	0x69, 0x6e, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x37, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69,
	0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x4d,
	0x61, 0x74, 0x72, 0x69, 0x78, 0x33, 0x78, 0x33, 0x46, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x33, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x33, 0x78, 0x33, 0x46,
	0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x02, 0x28, 0x02, 0x52,
	0x07, 0x72, 0x67, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x67, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x02, 0x28, 0x02, 0x52, 0x07, 0x62, 0x67, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x12, 0x30, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x62, 0x65, 0x74, 0x68, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c, 0x74, 0x70, 0x62,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x33, 0x46, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x62, 0x65, 0x74,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x0e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x6c, 0x74, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x32, 0x46, 0x52, 0x0d, 0x69, 0x6c,
	0x6c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x53, 0x70, 0x64, 0x12, 0x48, 0x0a, 0x0d, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x43,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x74,
	0x72, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x1a, 0xdc, 0x01, 0x0a, 0x0c, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x74, 0x72, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x4d, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x74, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x32, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x4f, 0x4e, 0x4f, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x52,
	0x47, 0x42, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x52, 0x47,
	0x47, 0x42, 0x10, 0x02, 0x1a, 0x55, 0x0a, 0x13, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x61, 0x6c,
	0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03,
	0x65, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x02, 0x42, 0x02, 0x10, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x62, 0x0a, 0x0e, 0x49,
	0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x05, 0x0a,
	0x01, 0x41, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x35, 0x30, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x44, 0x36, 0x35, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x37, 0x35, 0x10, 0x03, 0x12,
	0x06, 0x0a, 0x02, 0x46, 0x32, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x46, 0x37, 0x10, 0x05, 0x12,
	0x07, 0x0a, 0x03, 0x46, 0x31, 0x31, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x4c, 0x38, 0x34,
	0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x63, 0x42,
	0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x6c, 0x74, 0x70, 0x62, 0x3b, 0x6c, 0x74, 0x70, 0x62,
}

var (
	file_color_calibration_proto_rawDescOnce sync.Once
	file_color_calibration_proto_rawDescData = file_color_calibration_proto_rawDesc
)

func file_color_calibration_proto_rawDescGZIP() []byte {
	file_color_calibration_proto_rawDescOnce.Do(func() {
		file_color_calibration_proto_rawDescData = protoimpl.X.CompressGZIP(file_color_calibration_proto_rawDescData)
	})
	return file_color_calibration_proto_rawDescData
}

var file_color_calibration_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_color_calibration_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_color_calibration_proto_goTypes = []any{
	(ColorCalibration_IlluminantType)(0),             // 0: ltpb.ColorCalibration.IlluminantType
	(ColorCalibration_SpectralData_ChannelFormat)(0), // 1: ltpb.ColorCalibration.SpectralData.ChannelFormat
	(*ColorCalibration)(nil),                         // 2: ltpb.ColorCalibration
	(*ColorCalibration_SpectralData)(nil),            // 3: ltpb.ColorCalibration.SpectralData
	(*ColorCalibration_SpectralSensitivity)(nil),     // 4: ltpb.ColorCalibration.SpectralSensitivity
	(*Matrix3X3F)(nil),                               // 5: ltpb.Matrix3x3F
	(*Point3F)(nil),                                  // 6: ltpb.Point3F
	(*Point2F)(nil),                                  // 7: ltpb.Point2F
}
var file_color_calibration_proto_depIdxs = []int32{
	0, // 0: ltpb.ColorCalibration.type:type_name -> ltpb.ColorCalibration.IlluminantType
	5, // 1: ltpb.ColorCalibration.forward_matrix:type_name -> ltpb.Matrix3x3F
	5, // 2: ltpb.ColorCalibration.color_matrix:type_name -> ltpb.Matrix3x3F
	6, // 3: ltpb.ColorCalibration.macbeth_data:type_name -> ltpb.Point3F
	7, // 4: ltpb.ColorCalibration.illuminant_spd:type_name -> ltpb.Point2F
	3, // 5: ltpb.ColorCalibration.spectral_data:type_name -> ltpb.ColorCalibration.SpectralData
	1, // 6: ltpb.ColorCalibration.SpectralData.format:type_name -> ltpb.ColorCalibration.SpectralData.ChannelFormat
	4, // 7: ltpb.ColorCalibration.SpectralData.channel_data:type_name -> ltpb.ColorCalibration.SpectralSensitivity
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_color_calibration_proto_init() }
func file_color_calibration_proto_init() {
	if File_color_calibration_proto != nil {
		return
	}
	file_matrix3x3f_proto_init()
	file_point3f_proto_init()
	file_point2f_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_color_calibration_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ColorCalibration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_color_calibration_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ColorCalibration_SpectralData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_color_calibration_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ColorCalibration_SpectralSensitivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_color_calibration_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_color_calibration_proto_goTypes,
		DependencyIndexes: file_color_calibration_proto_depIdxs,
		EnumInfos:         file_color_calibration_proto_enumTypes,
		MessageInfos:      file_color_calibration_proto_msgTypes,
	}.Build()
	File_color_calibration_proto = out.File
	file_color_calibration_proto_rawDesc = nil
	file_color_calibration_proto_goTypes = nil
	file_color_calibration_proto_depIdxs = nil
}
